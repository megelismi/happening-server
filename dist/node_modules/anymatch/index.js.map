{"version":3,"sources":["../../../node_modules/anymatch/index.js"],"names":["micromatch","require","normalize","path","arrify","a","Array","isArray","anymatch","criteria","value","returnIndex","startIndex","endIndex","arguments","length","bind","map","criterion","matcher","string","altString","altValue","matched","matchIndex","testCriteria","index","result","Object","prototype","toString","call","isMatch","test","apply","crit","negGlobs","reduce","arr","slice","push","substr","any","sep","concat","some","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\nvar micromatch = require('micromatch');\nvar normalize = require('normalize-path');\nvar path = require('path'); // required for tests.\nvar arrify = function(a) { return a == null ? [] : (Array.isArray(a) ? a : [a]); };\n\nvar anymatch = function(criteria, value, returnIndex, startIndex, endIndex) {\n  criteria = arrify(criteria);\n  value = arrify(value);\n  if (arguments.length === 1) {\n    return anymatch.bind(null, criteria.map(function(criterion) {\n      return typeof criterion === 'string' && criterion[0] !== '!' ?\n        micromatch.matcher(criterion) : criterion;\n    }));\n  }\n  startIndex = startIndex || 0;\n  var string = value[0];\n  var altString, altValue;\n  var matched = false;\n  var matchIndex = -1;\n  function testCriteria(criterion, index) {\n    var result;\n    switch (Object.prototype.toString.call(criterion)) {\n    case '[object String]':\n      result = string === criterion || altString && altString === criterion;\n      result = result || micromatch.isMatch(string, criterion);\n      break;\n    case '[object RegExp]':\n      result = criterion.test(string) || altString && criterion.test(altString);\n      break;\n    case '[object Function]':\n      result = criterion.apply(null, value);\n      result = result || altValue && criterion.apply(null, altValue);\n      break;\n    default:\n      result = false;\n    }\n    if (result) {\n      matchIndex = index + startIndex;\n    }\n    return result;\n  }\n  var crit = criteria;\n  var negGlobs = crit.reduce(function(arr, criterion, index) {\n    if (typeof criterion === 'string' && criterion[0] === '!') {\n      if (crit === criteria) {\n        // make a copy before modifying\n        crit = crit.slice();\n      }\n      crit[index] = null;\n      arr.push(criterion.substr(1));\n    }\n    return arr;\n  }, []);\n  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {\n    if (path.sep === '\\\\' && typeof string === 'string') {\n      altString = normalize(string);\n      altString = altString === string ? null : altString;\n      if (altString) altValue = [altString].concat(value.slice(1));\n    }\n    matched = crit.slice(startIndex, endIndex).some(testCriteria);\n  }\n  return returnIndex === true ? matchIndex : matched;\n};\n\nmodule.exports = anymatch;\n"]}