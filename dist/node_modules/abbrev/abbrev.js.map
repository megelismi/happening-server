{"version":3,"sources":["../../../node_modules/abbrev/abbrev.js"],"names":["module","exports","abbrev","monkeyPatch","Object","defineProperty","Array","prototype","value","enumerable","configurable","writable","keys","list","arguments","length","isArray","slice","call","i","l","args","String","sort","lexSort","abbrevs","prev","current","next","nextMatches","prevMatches","j","cl","curChar","charAt","a","substr","b"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiBA,UAAUC,OAAOA,MAAP,GAAgBA,MAA3C;;AAEAA,OAAOC,WAAP,GAAqBA,WAArB;;AAEA,SAASA,WAAT,GAAwB;AACtBC,SAAOC,cAAP,CAAsBC,MAAMC,SAA5B,EAAuC,QAAvC,EAAiD;AAC/CC,WAAO,iBAAY;AAAE,aAAON,OAAO,IAAP,CAAP;AAAqB,KADK;AAE/CO,gBAAY,KAFmC,EAE5BC,cAAc,IAFc,EAERC,UAAU;AAFF,GAAjD;;AAKAP,SAAOC,cAAP,CAAsBD,OAAOG,SAA7B,EAAwC,QAAxC,EAAkD;AAChDC,WAAO,iBAAY;AAAE,aAAON,OAAOE,OAAOQ,IAAP,CAAY,IAAZ,CAAP,CAAP;AAAkC,KADP;AAEhDH,gBAAY,KAFoC,EAE7BC,cAAc,IAFe,EAETC,UAAU;AAFD,GAAlD;AAID;;AAED,SAAST,MAAT,CAAiBW,IAAjB,EAAuB;AACrB,MAAIC,UAAUC,MAAV,KAAqB,CAArB,IAA0B,CAACT,MAAMU,OAAN,CAAcH,IAAd,CAA/B,EAAoD;AAClDA,WAAOP,MAAMC,SAAN,CAAgBU,KAAhB,CAAsBC,IAAtB,CAA2BJ,SAA3B,EAAsC,CAAtC,CAAP;AACD;AACD,OAAK,IAAIK,IAAI,CAAR,EAAWC,IAAIP,KAAKE,MAApB,EAA4BM,OAAO,EAAxC,EAA6CF,IAAIC,CAAjD,EAAqDD,GAArD,EAA2D;AACzDE,SAAKF,CAAL,IAAU,OAAON,KAAKM,CAAL,CAAP,KAAmB,QAAnB,GAA8BN,KAAKM,CAAL,CAA9B,GAAwCG,OAAOT,KAAKM,CAAL,CAAP,CAAlD;AACD;;AAED;AACAE,SAAOA,KAAKE,IAAL,CAAUC,OAAV,CAAP;;AAEA;AACA,MAAIC,UAAU,EAAd;AAAA,MACIC,OAAO,EADX;AAEA,OAAK,IAAIP,IAAI,CAAR,EAAWC,IAAIC,KAAKN,MAAzB,EAAkCI,IAAIC,CAAtC,EAA0CD,GAA1C,EAAgD;AAC9C,QAAIQ,UAAUN,KAAKF,CAAL,CAAd;AAAA,QACIS,OAAOP,KAAKF,IAAI,CAAT,KAAe,EAD1B;AAAA,QAEIU,cAAc,IAFlB;AAAA,QAGIC,cAAc,IAHlB;AAIA,QAAIH,YAAYC,IAAhB,EAAsB;AACtB,SAAK,IAAIG,IAAI,CAAR,EAAWC,KAAKL,QAAQZ,MAA7B,EAAsCgB,IAAIC,EAA1C,EAA+CD,GAA/C,EAAqD;AACnD,UAAIE,UAAUN,QAAQO,MAAR,CAAeH,CAAf,CAAd;AACAF,oBAAcA,eAAeI,YAAYL,KAAKM,MAAL,CAAYH,CAAZ,CAAzC;AACAD,oBAAcA,eAAeG,YAAYP,KAAKQ,MAAL,CAAYH,CAAZ,CAAzC;AACA,UAAI,CAACF,WAAD,IAAgB,CAACC,WAArB,EAAkC;AAChCC;AACA;AACD;AACF;AACDL,WAAOC,OAAP;AACA,QAAII,MAAMC,EAAV,EAAc;AACZP,cAAQE,OAAR,IAAmBA,OAAnB;AACA;AACD;AACD,SAAK,IAAIQ,IAAIR,QAAQS,MAAR,CAAe,CAAf,EAAkBL,CAAlB,CAAb,EAAoCA,KAAKC,EAAzC,EAA8CD,GAA9C,EAAoD;AAClDN,cAAQU,CAAR,IAAaR,OAAb;AACAQ,WAAKR,QAAQO,MAAR,CAAeH,CAAf,CAAL;AACD;AACF;AACD,SAAON,OAAP;AACD;;AAED,SAASD,OAAT,CAAkBW,CAAlB,EAAqBE,CAArB,EAAwB;AACtB,SAAOF,MAAME,CAAN,GAAU,CAAV,GAAcF,IAAIE,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAAlC;AACD","file":"abbrev.js","sourcesContent":["module.exports = exports = abbrev.abbrev = abbrev\n\nabbrev.monkeyPatch = monkeyPatch\n\nfunction monkeyPatch () {\n  Object.defineProperty(Array.prototype, 'abbrev', {\n    value: function () { return abbrev(this) },\n    enumerable: false, configurable: true, writable: true\n  })\n\n  Object.defineProperty(Object.prototype, 'abbrev', {\n    value: function () { return abbrev(Object.keys(this)) },\n    enumerable: false, configurable: true, writable: true\n  })\n}\n\nfunction abbrev (list) {\n  if (arguments.length !== 1 || !Array.isArray(list)) {\n    list = Array.prototype.slice.call(arguments, 0)\n  }\n  for (var i = 0, l = list.length, args = [] ; i < l ; i ++) {\n    args[i] = typeof list[i] === \"string\" ? list[i] : String(list[i])\n  }\n\n  // sort them lexicographically, so that they're next to their nearest kin\n  args = args.sort(lexSort)\n\n  // walk through each, seeing how much it has in common with the next and previous\n  var abbrevs = {}\n    , prev = \"\"\n  for (var i = 0, l = args.length ; i < l ; i ++) {\n    var current = args[i]\n      , next = args[i + 1] || \"\"\n      , nextMatches = true\n      , prevMatches = true\n    if (current === next) continue\n    for (var j = 0, cl = current.length ; j < cl ; j ++) {\n      var curChar = current.charAt(j)\n      nextMatches = nextMatches && curChar === next.charAt(j)\n      prevMatches = prevMatches && curChar === prev.charAt(j)\n      if (!nextMatches && !prevMatches) {\n        j ++\n        break\n      }\n    }\n    prev = current\n    if (j === cl) {\n      abbrevs[current] = current\n      continue\n    }\n    for (var a = current.substr(0, j) ; j <= cl ; j ++) {\n      abbrevs[a] = current\n      a += current.charAt(j)\n    }\n  }\n  return abbrevs\n}\n\nfunction lexSort (a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n"]}