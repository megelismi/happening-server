{"version":3,"sources":["../../../node_modules/async/parallelLimit.js"],"names":["Object","defineProperty","exports","value","default","parallelLimit","_eachOfLimit","require","_eachOfLimit2","_interopRequireDefault","_parallel","_parallel2","obj","__esModule","tasks","limit","callback","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,eAAeC,QAAQ,wBAAR,CAAnB;;AAEA,IAAIC,gBAAgBC,uBAAuBH,YAAvB,CAApB;;AAEA,IAAII,YAAYH,QAAQ,qBAAR,CAAhB;;AAEA,IAAII,aAAaF,uBAAuBC,SAAvB,CAAjB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;AAoBA,SAASP,aAAT,CAAuBS,KAAvB,EAA8BC,KAA9B,EAAqCC,QAArC,EAA+C;AAC7C,GAAC,GAAGL,WAAWP,OAAf,EAAwB,CAAC,GAAGI,cAAcJ,OAAlB,EAA2BW,KAA3B,CAAxB,EAA2DD,KAA3D,EAAkEE,QAAlE;AACD;AACDC,OAAOf,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"parallelLimit.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parallelLimit;\n\nvar _eachOfLimit = require('./internal/eachOfLimit');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Collection} tasks - A collection containing functions to run.\n * Each function is passed a `callback(err, result)` which it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n */\nfunction parallelLimit(tasks, limit, callback) {\n  (0, _parallel2.default)((0, _eachOfLimit2.default)(limit), tasks, callback);\n}\nmodule.exports = exports['default'];"]}