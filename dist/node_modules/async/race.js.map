{"version":3,"sources":["../../../node_modules/async/race.js"],"names":["Object","defineProperty","exports","value","default","race","_isArray","require","_isArray2","_interopRequireDefault","_noop","_noop2","_once","_once2","obj","__esModule","tasks","callback","TypeError","length","i","l","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,IAAlB;;AAEA,IAAIC,WAAWC,QAAQ,gBAAR,CAAf;;AAEA,IAAIC,YAAYC,uBAAuBH,QAAvB,CAAhB;;AAEA,IAAII,QAAQH,QAAQ,aAAR,CAAZ;;AAEA,IAAII,SAASF,uBAAuBC,KAAvB,CAAb;;AAEA,IAAIE,QAAQL,QAAQ,iBAAR,CAAZ;;AAEA,IAAIM,SAASJ,uBAAuBG,KAAvB,CAAb;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEV,SAASU,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAAST,IAAT,CAAcW,KAAd,EAAqBC,QAArB,EAA+B;AAC3BA,eAAW,CAAC,GAAGJ,OAAOT,OAAX,EAAoBa,YAAYN,OAAOP,OAAvC,CAAX;AACA,QAAI,CAAC,CAAC,GAAGI,UAAUJ,OAAd,EAAuBY,KAAvB,CAAL,EAAoC,OAAOC,SAAS,IAAIC,SAAJ,CAAc,sDAAd,CAAT,CAAP;AACpC,QAAI,CAACF,MAAMG,MAAX,EAAmB,OAAOF,UAAP;AACnB,SAAK,IAAIG,IAAI,CAAR,EAAWC,IAAIL,MAAMG,MAA1B,EAAkCC,IAAIC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC1CJ,cAAMI,CAAN,EAASH,QAAT;AACH;AACJ;AACDK,OAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"race.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = race;\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing functions to run. Each function\n * is passed a `callback(err, result)` which it must call on completion with an\n * error `err` (which can be `null`) and an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    if (!(0, _isArray2.default)(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        tasks[i](callback);\n    }\n}\nmodule.exports = exports['default'];"]}