{"version":3,"sources":["../../../node_modules/async/doUntil.js"],"names":["Object","defineProperty","exports","value","default","doUntil","_doWhilst","require","_doWhilst2","_interopRequireDefault","obj","__esModule","fn","test","callback","apply","arguments","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,YAAYC,QAAQ,YAAR,CAAhB;;AAEA,IAAIC,aAAaC,uBAAuBH,SAAvB,CAAjB;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEN,SAASM,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;AAoBA,SAASL,OAAT,CAAiBO,EAAjB,EAAqBC,IAArB,EAA2BC,QAA3B,EAAqC;AACjC,KAAC,GAAGN,WAAWJ,OAAf,EAAwBQ,EAAxB,EAA4B,YAAY;AACpC,eAAO,CAACC,KAAKE,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAR;AACH,KAFD,EAEGF,QAFH;AAGH;AACDG,OAAOf,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"doUntil.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = doUntil;\n\nvar _doWhilst = require('./doWhilst');\n\nvar _doWhilst2 = _interopRequireDefault(_doWhilst);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} test - synchronous truth test to perform after each\n * execution of `fn`. Invoked with the non-error callback results of `fn`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction doUntil(fn, test, callback) {\n    (0, _doWhilst2.default)(fn, function () {\n        return !test.apply(this, arguments);\n    }, callback);\n}\nmodule.exports = exports['default'];"]}