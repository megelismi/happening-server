{"version":3,"sources":["../../../node_modules/async/timeout.js"],"names":["Object","defineProperty","exports","value","default","timeout","_initialParams","require","_initialParams2","_interopRequireDefault","obj","__esModule","asyncFn","milliseconds","info","originalCallback","timer","timedOut","injectedCallback","apply","arguments","clearTimeout","timeoutCallback","name","error","Error","code","args","origCallback","setTimeout","concat","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,iBAAiBC,QAAQ,0BAAR,CAArB;;AAEA,IAAIC,kBAAkBC,uBAAuBH,cAAvB,CAAtB;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEN,SAASM,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,SAASL,OAAT,CAAiBO,OAAjB,EAA0BC,YAA1B,EAAwCC,IAAxC,EAA8C;AAC1C,QAAIC,gBAAJ,EAAsBC,KAAtB;AACA,QAAIC,WAAW,KAAf;;AAEA,aAASC,gBAAT,GAA4B;AACxB,YAAI,CAACD,QAAL,EAAe;AACXF,6BAAiBI,KAAjB,CAAuB,IAAvB,EAA6BC,SAA7B;AACAC,yBAAaL,KAAb;AACH;AACJ;;AAED,aAASM,eAAT,GAA2B;AACvB,YAAIC,OAAOX,QAAQW,IAAR,IAAgB,WAA3B;AACA,YAAIC,QAAQ,IAAIC,KAAJ,CAAU,wBAAwBF,IAAxB,GAA+B,cAAzC,CAAZ;AACAC,cAAME,IAAN,GAAa,WAAb;AACA,YAAIZ,IAAJ,EAAU;AACNU,kBAAMV,IAAN,GAAaA,IAAb;AACH;AACDG,mBAAW,IAAX;AACAF,yBAAiBS,KAAjB;AACH;;AAED,WAAO,CAAC,GAAGhB,gBAAgBJ,OAApB,EAA6B,UAAUuB,IAAV,EAAgBC,YAAhB,EAA8B;AAC9Db,2BAAmBa,YAAnB;AACA;AACAZ,gBAAQa,WAAWP,eAAX,EAA4BT,YAA5B,CAAR;AACAD,gBAAQO,KAAR,CAAc,IAAd,EAAoBQ,KAAKG,MAAL,CAAYZ,gBAAZ,CAApB;AACH,KALM,CAAP;AAMH;AACDa,OAAO7B,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"timeout.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = timeout;\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} asyncFn - The asynchronous function you want to set the\n * time limit.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {Function} Returns a wrapped function that can be used with any of\n * the control flow functions. Invoke this function with the same\n * parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var originalCallback, timer;\n    var timedOut = false;\n\n    function injectedCallback() {\n        if (!timedOut) {\n            originalCallback.apply(null, arguments);\n            clearTimeout(timer);\n        }\n    }\n\n    function timeoutCallback() {\n        var name = asyncFn.name || 'anonymous';\n        var error = new Error('Callback function \"' + name + '\" timed out.');\n        error.code = 'ETIMEDOUT';\n        if (info) {\n            error.info = info;\n        }\n        timedOut = true;\n        originalCallback(error);\n    }\n\n    return (0, _initialParams2.default)(function (args, origCallback) {\n        originalCallback = origCallback;\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        asyncFn.apply(null, args.concat(injectedCallback));\n    });\n}\nmodule.exports = exports['default'];"]}