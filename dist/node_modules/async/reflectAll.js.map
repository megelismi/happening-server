{"version":3,"sources":["../../../node_modules/async/reflectAll.js"],"names":["Object","defineProperty","exports","value","default","reflectAll","_reflect","require","_reflect2","_interopRequireDefault","_isArray","_isArray2","_arrayMap2","_arrayMap3","_baseForOwn","_baseForOwn2","obj","__esModule","tasks","results","task","key","call","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,UAAlB;;AAEA,IAAIC,WAAWC,QAAQ,WAAR,CAAf;;AAEA,IAAIC,YAAYC,uBAAuBH,QAAvB,CAAhB;;AAEA,IAAII,WAAWH,QAAQ,gBAAR,CAAf;;AAEA,IAAII,YAAYF,uBAAuBC,QAAvB,CAAhB;;AAEA,IAAIE,aAAaL,QAAQ,kBAAR,CAAjB;;AAEA,IAAIM,aAAaJ,uBAAuBG,UAAvB,CAAjB;;AAEA,IAAIE,cAAcP,QAAQ,oBAAR,CAAlB;;AAEA,IAAIQ,eAAeN,uBAAuBK,WAAvB,CAAnB;;AAEA,SAASL,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEZ,SAASY,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA,SAASX,UAAT,CAAoBa,KAApB,EAA2B;AACvB,QAAIC,OAAJ;AACA,QAAI,CAAC,GAAGR,UAAUP,OAAd,EAAuBc,KAAvB,CAAJ,EAAmC;AAC/BC,kBAAU,CAAC,GAAGN,WAAWT,OAAf,EAAwBc,KAAxB,EAA+BV,UAAUJ,OAAzC,CAAV;AACH,KAFD,MAEO;AACHe,kBAAU,EAAV;AACA,SAAC,GAAGJ,aAAaX,OAAjB,EAA0Bc,KAA1B,EAAiC,UAAUE,IAAV,EAAgBC,GAAhB,EAAqB;AAClDF,oBAAQE,GAAR,IAAeb,UAAUJ,OAAV,CAAkBkB,IAAlB,CAAuB,IAAvB,EAA6BF,IAA7B,CAAf;AACH,SAFD;AAGH;AACD,WAAOD,OAAP;AACH;AACDI,OAAOrB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"reflectAll.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reflectAll;\n\nvar _reflect = require('./reflect');\n\nvar _reflect2 = _interopRequireDefault(_reflect);\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _arrayMap2 = require('lodash/_arrayMap');\n\nvar _arrayMap3 = _interopRequireDefault(_arrayMap2);\n\nvar _baseForOwn = require('lodash/_baseForOwn');\n\nvar _baseForOwn2 = _interopRequireDefault(_baseForOwn);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * A helper function that wraps an array or an object of functions with reflect.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array} tasks - The array of functions to wrap in `async.reflect`.\n * @returns {Array} Returns an array of functions, each function wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if ((0, _isArray2.default)(tasks)) {\n        results = (0, _arrayMap3.default)(tasks, _reflect2.default);\n    } else {\n        results = {};\n        (0, _baseForOwn2.default)(tasks, function (task, key) {\n            results[key] = _reflect2.default.call(this, task);\n        });\n    }\n    return results;\n}\nmodule.exports = exports['default'];"]}