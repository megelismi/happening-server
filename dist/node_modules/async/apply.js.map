{"version":3,"sources":["../../../node_modules/async/apply.js"],"names":["Object","defineProperty","exports","value","_rest","require","_rest2","_interopRequireDefault","obj","__esModule","default","fn","args","callArgs","apply","concat","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;;AAIA,IAAIC,QAAQC,QAAQ,iBAAR,CAAZ;;AAEA,IAAIC,SAASC,uBAAuBH,KAAvB,CAAb;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CAN,QAAQQ,OAAR,GAAkB,CAAC,GAAGJ,OAAOI,OAAX,EAAoB,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACtD,WAAO,CAAC,GAAGN,OAAOI,OAAX,EAAoB,UAAUG,QAAV,EAAoB;AAC3C,eAAOF,GAAGG,KAAH,CAAS,IAAT,EAAeF,KAAKG,MAAL,CAAYF,QAAZ,CAAf,CAAP;AACH,KAFM,CAAP;AAGH,CAJiB,CAAlB;AAKAG,OAAOd,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"apply.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _rest = require('./internal/rest');\n\nvar _rest2 = _interopRequireDefault(_rest);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} function - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nexports.default = (0, _rest2.default)(function (fn, args) {\n    return (0, _rest2.default)(function (callArgs) {\n        return fn.apply(null, args.concat(callArgs));\n    });\n});\nmodule.exports = exports['default'];"]}