{"version":3,"sources":["../../../node_modules/async/reduce.js"],"names":["Object","defineProperty","exports","value","default","reduce","_eachOfSeries","require","_eachOfSeries2","_interopRequireDefault","_noop","_noop2","_once","_once2","obj","__esModule","coll","memo","iteratee","callback","x","i","err","v","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,gBAAgBC,QAAQ,gBAAR,CAApB;;AAEA,IAAIC,iBAAiBC,uBAAuBH,aAAvB,CAArB;;AAEA,IAAII,QAAQH,QAAQ,aAAR,CAAZ;;AAEA,IAAII,SAASF,uBAAuBC,KAAvB,CAAb;;AAEA,IAAIE,QAAQL,QAAQ,iBAAR,CAAZ;;AAEA,IAAIM,SAASJ,uBAAuBG,KAAvB,CAAb;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEV,SAASU,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,SAAST,MAAT,CAAgBW,IAAhB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAC5CA,eAAW,CAAC,GAAGN,OAAOT,OAAX,EAAoBe,YAAYR,OAAOP,OAAvC,CAAX;AACA,KAAC,GAAGI,eAAeJ,OAAnB,EAA4BY,IAA5B,EAAkC,UAAUI,CAAV,EAAaC,CAAb,EAAgBF,QAAhB,EAA0B;AACxDD,iBAASD,IAAT,EAAeG,CAAf,EAAkB,UAAUE,GAAV,EAAeC,CAAf,EAAkB;AAChCN,mBAAOM,CAAP;AACAJ,qBAASG,GAAT;AACH,SAHD;AAIH,KALD,EAKG,UAAUA,GAAV,EAAe;AACdH,iBAASG,GAAT,EAAcL,IAAd;AACH,KAPD;AAQH;AACDO,OAAOtB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"reduce.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = reduce;\n\nvar _eachOfSeries = require('./eachOfSeries');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _once = require('./internal/once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = (0, _once2.default)(callback || _noop2.default);\n    (0, _eachOfSeries2.default)(coll, function (x, i, callback) {\n        iteratee(memo, x, function (err, v) {\n            memo = v;\n            callback(err);\n        });\n    }, function (err) {\n        callback(err, memo);\n    });\n}\nmodule.exports = exports['default'];"]}