{"version":3,"sources":["../../../node_modules/async/reduceRight.js"],"names":["Object","defineProperty","exports","value","default","reduceRight","_reduce","require","_reduce2","_interopRequireDefault","obj","__esModule","slice","Array","prototype","array","memo","iteratee","callback","reversed","call","reverse","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,WAAlB;;AAEA,IAAIC,UAAUC,QAAQ,UAAR,CAAd;;AAEA,IAAIC,WAAWC,uBAAuBH,OAAvB,CAAf;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEN,SAASM,GAAX,EAArC;AAAwD;;AAE/F,IAAIE,QAAQC,MAAMC,SAAN,CAAgBF,KAA5B;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASP,WAAT,CAAqBU,KAArB,EAA4BC,IAA5B,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AACpD,MAAIC,WAAWP,MAAMQ,IAAN,CAAWL,KAAX,EAAkBM,OAAlB,EAAf;AACA,GAAC,GAAGb,SAASJ,OAAb,EAAsBe,QAAtB,EAAgCH,IAAhC,EAAsCC,QAAtC,EAAgDC,QAAhD;AACD;AACDI,OAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"reduceRight.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = reduceRight;\n\nvar _reduce = require('./reduce');\n\nvar _reduce2 = _interopRequireDefault(_reduce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar slice = Array.prototype.slice;\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {Function} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction. The `iteratee` is passed a\n * `callback(err, reduction)` which accepts an optional error as its first\n * argument, and the state of the reduction as the second. If an error is\n * passed to the callback, the reduction is stopped and the main `callback` is\n * immediately called with the error. Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n */\nfunction reduceRight(array, memo, iteratee, callback) {\n  var reversed = slice.call(array).reverse();\n  (0, _reduce2.default)(reversed, memo, iteratee, callback);\n}\nmodule.exports = exports['default'];"]}