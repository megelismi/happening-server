{"version":3,"sources":["../../../node_modules/async/forever.js"],"names":["Object","defineProperty","exports","value","default","forever","_noop","require","_noop2","_interopRequireDefault","_onlyOnce","_onlyOnce2","_ensureAsync","_ensureAsync2","obj","__esModule","fn","errback","done","task","next","err","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,QAAQC,QAAQ,aAAR,CAAZ;;AAEA,IAAIC,SAASC,uBAAuBH,KAAvB,CAAb;;AAEA,IAAII,YAAYH,QAAQ,qBAAR,CAAhB;;AAEA,IAAII,aAAaF,uBAAuBC,SAAvB,CAAjB;;AAEA,IAAIE,eAAeL,QAAQ,eAAR,CAAnB;;AAEA,IAAIM,gBAAgBJ,uBAAuBG,YAAvB,CAApB;;AAEA,SAASH,sBAAT,CAAgCK,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEV,SAASU,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAST,OAAT,CAAiBW,EAAjB,EAAqBC,OAArB,EAA8B;AAC1B,QAAIC,OAAO,CAAC,GAAGP,WAAWP,OAAf,EAAwBa,WAAWT,OAAOJ,OAA1C,CAAX;AACA,QAAIe,OAAO,CAAC,GAAGN,cAAcT,OAAlB,EAA2BY,EAA3B,CAAX;;AAEA,aAASI,IAAT,CAAcC,GAAd,EAAmB;AACf,YAAIA,GAAJ,EAAS,OAAOH,KAAKG,GAAL,CAAP;AACTF,aAAKC,IAAL;AACH;AACDA;AACH;AACDE,OAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"forever.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = forever;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _ensureAsync = require('./ensureAsync');\n\nvar _ensureAsync2 = _interopRequireDefault(_ensureAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the\n * callback then `errback` is called with the error, and execution stops,\n * otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Function} fn - a function to call repeatedly. Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = (0, _onlyOnce2.default)(errback || _noop2.default);\n    var task = (0, _ensureAsync2.default)(fn);\n\n    function next(err) {\n        if (err) return done(err);\n        task(next);\n    }\n    next();\n}\nmodule.exports = exports['default'];"]}