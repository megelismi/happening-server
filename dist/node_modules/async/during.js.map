{"version":3,"sources":["../../../node_modules/async/during.js"],"names":["Object","defineProperty","exports","value","default","during","_noop","require","_noop2","_interopRequireDefault","_onlyOnce","_onlyOnce2","obj","__esModule","test","fn","callback","next","err","check","truth","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,MAAlB;;AAEA,IAAIC,QAAQC,QAAQ,aAAR,CAAZ;;AAEA,IAAIC,SAASC,uBAAuBH,KAAvB,CAAb;;AAEA,IAAII,YAAYH,QAAQ,qBAAR,CAAhB;;AAEA,IAAII,aAAaF,uBAAuBC,SAAvB,CAAjB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAASP,MAAT,CAAgBS,IAAhB,EAAsBC,EAAtB,EAA0BC,QAA1B,EAAoC;AAChCA,eAAW,CAAC,GAAGL,WAAWP,OAAf,EAAwBY,YAAYR,OAAOJ,OAA3C,CAAX;;AAEA,aAASa,IAAT,CAAcC,GAAd,EAAmB;AACf,YAAIA,GAAJ,EAAS,OAAOF,SAASE,GAAT,CAAP;AACTJ,aAAKK,KAAL;AACH;;AAED,aAASA,KAAT,CAAeD,GAAf,EAAoBE,KAApB,EAA2B;AACvB,YAAIF,GAAJ,EAAS,OAAOF,SAASE,GAAT,CAAP;AACT,YAAI,CAACE,KAAL,EAAY,OAAOJ,SAAS,IAAT,CAAP;AACZD,WAAGE,IAAH;AACH;;AAEDH,SAAKK,KAAL;AACH;AACDE,OAAOnB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"during.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = during;\n\nvar _noop = require('lodash/noop');\n\nvar _noop2 = _interopRequireDefault(_noop);\n\nvar _onlyOnce = require('./internal/onlyOnce');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Like [`whilst`]{@link module:ControlFlow.whilst}, except the `test` is an asynchronous function that\n * is passed a callback in the form of `function (err, truth)`. If error is\n * passed to `test` or `fn`, the main callback is immediately called with the\n * value of the error.\n *\n * @name during\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - asynchronous truth test to perform before each\n * execution of `fn`. Invoked with (callback).\n * @param {Function} fn - A function which is called each time `test` passes.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error, if one occured, otherwise `null`.\n * @example\n *\n * var count = 0;\n *\n * async.during(\n *     function (callback) {\n *         return callback(null, count < 5);\n *     },\n *     function (callback) {\n *         count++;\n *         setTimeout(callback, 1000);\n *     },\n *     function (err) {\n *         // 5 seconds have passed\n *     }\n * );\n */\nfunction during(test, fn, callback) {\n    callback = (0, _onlyOnce2.default)(callback || _noop2.default);\n\n    function next(err) {\n        if (err) return callback(err);\n        test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (!truth) return callback(null);\n        fn(next);\n    }\n\n    test(check);\n}\nmodule.exports = exports['default'];"]}