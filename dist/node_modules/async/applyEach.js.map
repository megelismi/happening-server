{"version":3,"sources":["../../../node_modules/async/applyEach.js"],"names":["Object","defineProperty","exports","value","_applyEach","require","_applyEach2","_interopRequireDefault","_map","_map2","obj","__esModule","default","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,SAAO;AADoC,CAA7C;;AAIA,IAAIC,aAAaC,QAAQ,sBAAR,CAAjB;;AAEA,IAAIC,cAAcC,uBAAuBH,UAAvB,CAAlB;;AAEA,IAAII,OAAOH,QAAQ,OAAR,CAAX;;AAEA,IAAII,QAAQF,uBAAuBC,IAAvB,CAAZ;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAR,QAAQU,OAAR,GAAkB,CAAC,GAAGN,YAAYM,OAAhB,EAAyBH,MAAMG,OAA/B,CAAlB;AACAC,OAAOX,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"applyEach.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _applyEach = require('./internal/applyEach');\n\nvar _applyEach2 = _interopRequireDefault(_applyEach);\n\nvar _map = require('./map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} fns - A collection of asynchronous functions\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {Function} - If only the first argument, `fns`, is provided, it will\n * return a function which lets you pass in the arguments as if it were a single\n * function call. The signature is `(..args, callback)`. If invoked with any\n * arguments, `callback` is required.\n * @example\n *\n * async.applyEach([enableSearch, updateSchema], 'bucket', callback);\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async.applyEach([enableSearch, updateSchema]),\n *     callback\n * );\n */\nexports.default = (0, _applyEach2.default)(_map2.default);\nmodule.exports = exports['default'];"]}