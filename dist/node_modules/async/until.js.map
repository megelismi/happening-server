{"version":3,"sources":["../../../node_modules/async/until.js"],"names":["Object","defineProperty","exports","value","default","until","_whilst","require","_whilst2","_interopRequireDefault","obj","__esModule","test","fn","callback","apply","arguments","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,KAAlB;;AAEA,IAAIC,UAAUC,QAAQ,UAAR,CAAd;;AAEA,IAAIC,WAAWC,uBAAuBH,OAAvB,CAAf;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEN,SAASM,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASL,KAAT,CAAeO,IAAf,EAAqBC,EAArB,EAAyBC,QAAzB,EAAmC;AAC/B,KAAC,GAAGN,SAASJ,OAAb,EAAsB,YAAY;AAC9B,eAAO,CAACQ,KAAKG,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAR;AACH,KAFD,EAEGH,EAFH,EAEOC,QAFP;AAGH;AACDG,OAAOf,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"until.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = until;\n\nvar _whilst = require('./whilst');\n\nvar _whilst2 = _interopRequireDefault(_whilst);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Repeatedly call `fn` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `fn`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {Function} test - synchronous truth test to perform before each\n * execution of `fn`. Invoked with ().\n * @param {Function} fn - A function which is called each time `test` fails.\n * The function is passed a `callback(err)`, which must be called once it has\n * completed with an optional `err` argument. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `fn` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `fn`'s\n * callback. Invoked with (err, [results]);\n */\nfunction until(test, fn, callback) {\n    (0, _whilst2.default)(function () {\n        return !test.apply(this, arguments);\n    }, fn, callback);\n}\nmodule.exports = exports['default'];"]}