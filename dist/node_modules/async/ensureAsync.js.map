{"version":3,"sources":["../../../node_modules/async/ensureAsync.js"],"names":["Object","defineProperty","exports","value","default","ensureAsync","_setImmediate","require","_setImmediate2","_interopRequireDefault","_initialParams","_initialParams2","obj","__esModule","fn","args","callback","sync","push","innerArgs","arguments","apply","module"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;AAGAD,QAAQE,OAAR,GAAkBC,WAAlB;;AAEA,IAAIC,gBAAgBC,QAAQ,yBAAR,CAApB;;AAEA,IAAIC,iBAAiBC,uBAAuBH,aAAvB,CAArB;;AAEA,IAAII,iBAAiBH,QAAQ,0BAAR,CAArB;;AAEA,IAAII,kBAAkBF,uBAAuBC,cAAvB,CAAtB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAER,SAASQ,GAAX,EAArC;AAAwD;;AAE/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,SAASP,WAAT,CAAqBS,EAArB,EAAyB;AACrB,WAAO,CAAC,GAAGH,gBAAgBP,OAApB,EAA6B,UAAUW,IAAV,EAAgBC,QAAhB,EAA0B;AAC1D,YAAIC,OAAO,IAAX;AACAF,aAAKG,IAAL,CAAU,YAAY;AAClB,gBAAIC,YAAYC,SAAhB;AACA,gBAAIH,IAAJ,EAAU;AACN,iBAAC,GAAGT,eAAeJ,OAAnB,EAA4B,YAAY;AACpCY,6BAASK,KAAT,CAAe,IAAf,EAAqBF,SAArB;AACH,iBAFD;AAGH,aAJD,MAIO;AACHH,yBAASK,KAAT,CAAe,IAAf,EAAqBF,SAArB;AACH;AACJ,SATD;AAUAL,WAAGO,KAAH,CAAS,IAAT,EAAeN,IAAf;AACAE,eAAO,KAAP;AACH,KAdM,CAAP;AAeH;AACDK,OAAOpB,OAAP,GAAiBA,QAAQ,SAAR,CAAjB","file":"ensureAsync.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = ensureAsync;\n\nvar _setImmediate = require('./internal/setImmediate');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _initialParams = require('./internal/initialParams');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {Function} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    return (0, _initialParams2.default)(function (args, callback) {\n        var sync = true;\n        args.push(function () {\n            var innerArgs = arguments;\n            if (sync) {\n                (0, _setImmediate2.default)(function () {\n                    callback.apply(null, innerArgs);\n                });\n            } else {\n                callback.apply(null, innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    });\n}\nmodule.exports = exports['default'];"]}