{"version":3,"sources":["../../../../../node_modules/@tonybadguy/call-me-maybe/lib/headers.test.js"],"names":["_headers","require","_test","test","request","setHeaderIfNotExist","assert","equals","headers","myheader","end","MyHeader","undefined","setContentTypeIfNotExist","setHeader"],"mappings":"AAAA;;;;AAEA,IAAMA,WAAWC,QAAQ,WAAR,CAAjB;AACA,IAAMC,QAAQD,QAAQ,KAAR,EAAeE,IAA7B;;AAGAD,MAAM,4DAAN,EAAoE,kBAAS;AAC3E,MAAME,UAAU,EAAhB;AACAJ,WAASK,mBAAT,CAA6BD,OAA7B,EAAsC,UAAtC,EAAkD,SAAlD;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CAND;;AAQAR,MAAM,wDAAN,EAAgE,kBAAS;AACvE,MAAME,UAAU;AACdI,aAAS;AADK,GAAhB;AAGAR,WAASK,mBAAT,CAA6BD,OAA7B,EAAsC,UAAtC,EAAkD,SAAlD;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CARD;;AAUAR,MAAM,4DAAN,EAAoE,kBAAS;AAC3E,MAAME,UAAU;AACdI,aAAS;AACPC,gBAAS;AADF;AADK,GAAhB;AAKAT,WAASK,mBAAT,CAA6BD,OAA7B,EAAsC,UAAtC,EAAkD,SAAlD;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,UAAxC;AACAH,SAAOI,GAAP;AACD,CAVD;;AAYAR,MAAM,kFAAN,EAA0F,kBAAS;AACjG,MAAME,UAAU;AACdI,aAAS;AACPG,gBAAS;AADF;AADK,GAAhB;AAKAX,WAASK,mBAAT,CAA6BD,OAA7B,EAAsC,UAAtC,EAAkD,SAAlD;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBG,QAA9B,EAAwC,UAAxC;AACAL,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwCG,SAAxC;AACAN,SAAOI,GAAP;AACD,CAXD;;AAaAR,MAAM,4CAAN,EAAoD,kBAAS;;AAE3D,MAAME,UAAU,EAAhB;AACAJ,WAASa,wBAAT,CAAkCT,OAAlC,EAA2C,eAA3C;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgB,cAAhB,CAAd,EAA+C,eAA/C;AACAF,SAAOI,GAAP;AACD,CAPD;;AASAR,MAAM,iEAAN,EAAyE,kBAAS;AAChF,MAAME,UAAU;AACdI,iCACG,cADH,EACmB,UADnB;AADc,GAAhB;AAKAR,WAASa,wBAAT,CAAkCT,OAAlC,EAA2C,SAA3C;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgB,cAAhB,CAAd,EAA+C,UAA/C;AACAF,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgB,cAAhB,CAAd,EAA+CI,SAA/C;AACAN,SAAOI,GAAP;AACD,CAXD;;AAaAR,MAAM,kDAAN,EAA0D,kBAAS;AACjE,MAAME,UAAU,EAAhB;AACAJ,WAASc,SAAT,CAAmBV,OAAnB,EAA4B,UAA5B,EAAwC,SAAxC;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CAND;;AAQAR,MAAM,8CAAN,EAAsD,kBAAS;AAC7D,MAAME,UAAU;AACdI,aAAS;AADK,GAAhB;AAGAR,WAASc,SAAT,CAAmBV,OAAnB,EAA4B,UAA5B,EAAwC,SAAxC;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CARD;;AAUAR,MAAM,8CAAN,EAAsD,kBAAS;AAC7D,MAAME,UAAU;AACdI,aAAS;AACPC,gBAAS;AADF;AADK,GAAhB;AAKAT,WAASc,SAAT,CAAmBV,OAAnB,EAA4B,UAA5B,EAAwC,SAAxC;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CAVD;;AAYAR,MAAM,oEAAN,EAA4E,kBAAS;AACnF,MAAME,UAAU;AACdI,aAAS;AACPG,gBAAS;AADF;AADK,GAAhB;AAKAX,WAASc,SAAT,CAAmBV,OAAnB,EAA4B,UAA5B,EAAwC,SAAxC;;AAEAE,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBG,QAA9B,EAAwCC,SAAxC;AACAN,SAAOC,MAAP,CAAcH,QAAQI,OAAR,CAAgBC,QAA9B,EAAwC,SAAxC;AACAH,SAAOI,GAAP;AACD,CAXD","file":"headers.test.js","sourcesContent":["'use strict';\n\nconst _headers = require('./headers');\nconst _test = require('tap').test;\n\n\n_test('setHeaderIfNotExist sets header when headers are undefined', assert =>{\n  const request = {};\n  _headers.setHeaderIfNotExist(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});\n\n_test('setHeaderIfNotExist sets header when headers are empty', assert =>{\n  const request = {\n    headers: {}\n  };\n  _headers.setHeaderIfNotExist(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});\n\n_test('setHeaderIfNotExist does not set header when header exists', assert =>{\n  const request = {\n    headers: {\n      myheader:'original'\n    }\n  };\n  _headers.setHeaderIfNotExist(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'original');\n  assert.end();\n});\n\n_test('setHeaderIfNotExist does not set header when header with different casing exists', assert =>{\n  const request = {\n    headers: {\n      MyHeader:'original'\n    }\n  };\n  _headers.setHeaderIfNotExist(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.MyHeader, 'original');\n  assert.equals(request.headers.myheader, undefined);\n  assert.end();\n});\n\n_test('setContentTypeIfNotExist sets content type', assert =>{\n\n  const request = {};\n  _headers.setContentTypeIfNotExist(request, 'myContentType');\n\n  assert.equals(request.headers['Content-Type'], 'myContentType');\n  assert.end();\n});\n\n_test('setContentTypeIfNotExist does not set header when header exists', assert =>{\n  const request = {\n    headers: {\n      ['content-type']:'original'\n    }\n  };\n  _headers.setContentTypeIfNotExist(request, 'myvalue');\n\n  assert.equals(request.headers['content-type'], 'original');\n  assert.equals(request.headers['Content-Type'], undefined);\n  assert.end();\n});\n\n_test('setHeader sets header when headers are undefined', assert =>{\n  const request = {};\n  _headers.setHeader(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});\n\n_test('setHeader sets header when headers are empty', assert =>{\n  const request = {\n    headers: {}\n  };\n  _headers.setHeader(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});\n\n_test('setHeader replaces header when header exists', assert =>{\n  const request = {\n    headers: {\n      myheader:'original'\n    }\n  };\n  _headers.setHeader(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});\n\n_test('setHeader replaces header when header with different casing exists', assert =>{\n  const request = {\n    headers: {\n      MyHeader:'original'\n    }\n  };\n  _headers.setHeader(request, 'myheader', 'myvalue');\n\n  assert.equals(request.headers.MyHeader, undefined);\n  assert.equals(request.headers.myheader, 'myvalue');\n  assert.end();\n});"]}