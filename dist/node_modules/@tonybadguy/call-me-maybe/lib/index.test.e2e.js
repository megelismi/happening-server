'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _send = require('./index');
var _test = require('tap').test;

_test('Basic GET succeeds', function (assert) {
  var url = 'https://httpbin.org/get';

  _send({
    url: url
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.url, url);
    assert.end();
  });
});

_test('Basic GET with formatted url', function (assert) {
  var url = 'https://httpbin.org/{foo}';

  _send({
    url: url,
    urlParams: {
      foo: 'get'
    }
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.url, 'https://httpbin.org/get');
    assert.end();
  });
});

_test('Basic GET with query object', function (assert) {
  var url = 'https://httpbin.org/get';

  _send({
    url: url,
    query: {
      foo: 'bar'
    }
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.url, 'https://httpbin.org/get?foo=bar');
    assert.end();
  });
});

_test('Basic POST', function (assert) {

  var url = 'https://httpbin.org/post';

  _send({
    url: url,
    method: 'POST'
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.url, url);
    assert.end();
  });
});

_test('Basic POST with body', function (assert) {

  var url = 'https://httpbin.org/post';

  _send({
    url: url,
    method: 'POST',
    body: 'my data'
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.data, 'my data');
    assert.end();
  });
});

_test('POST json body', function (assert) {

  var url = 'https://httpbin.org/post';

  _send({
    url: url,
    method: 'POST',
    jsonBody: {
      foo: 'bar'
    }
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.json.foo, 'bar');
    assert.end();
  });
});

_test('POST urlencoded body', function (assert) {

  assert.plan(2);
  var url = 'https://httpbin.org/post';

  _send({
    url: url,
    method: 'POST',
    urlencodedBody: {
      foo: 'bar'
    }
  }).then(function (response) {
    assert.equal(response.statusCode, 200);
    assert.equal(response.jsonBody.form.foo, 'bar');
  });
});

_test('Headers are sent', function (assert) {

  var url = 'https://httpbin.org/headers';

  var headerName = 'X-Test-Header';
  var headerValue = 'test header value';

  _send({
    url: url,
    headers: _defineProperty({}, headerName, headerValue)
  }).then(function (response) {
    assert.equal(response.jsonBody.headers[headerName], headerValue);
    assert.end();
  });
});

_test('Reject promise when server responds with status code >= 300', function (assert) {
  var url = 'https://httpbin.org/status/300';

  _send({
    url: url
  }).then(function (response) {
    assert.fail();
  }).catch(function (error) {
    assert.equal(error.response.statusCode, 300);
    assert.end();
  });
});

_test('Reject promise when server responds with status code < 200', function (assert) {
  var url = 'https://httpbin.org/status/199';

  _send({
    url: url
  }).then(function (response) {
    assert.fail();
  }).catch(function (error) {
    assert.equal(error.response.statusCode, 199);
    assert.end();
  });
});

_test('Connection error rejects promise', function (assert) {
  var url = 'https://localhost:9999';

  _send({
    url: url
  }).then(function (response) {
    assert.fail();
  }).catch(function (error) {
    assert.equal(error.code, 'ECONNREFUSED');
    assert.end();
  });
});
//# sourceMappingURL=index.test.e2e.js.map