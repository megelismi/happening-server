{"version":3,"sources":["../../../../../../node_modules/@tonybadguy/call-me-maybe/lib/request-filters/bearer-token.test.js"],"names":["_test","require","test","_bearerToken","result","filter","bearerToken","assert","equals","headers","Authorization","end","request","authorization","undefined"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,KAAR,EAAeC,IAA7B;AACA,IAAMC,eAAeF,QAAQ,gBAAR,CAArB;;AAEAD,MAAM,2BAAN,EAAmC,kBAAS;AAC1C,MAAMI,SAASD,aAAaE,MAAb,CAAoB;AACjCC,iBAAa;AADoB,GAApB,CAAf;;AAIAC,SAAOC,MAAP,CAAcJ,OAAOK,OAAP,CAAeC,aAA7B,EAA4C,iBAA5C;AACAH,SAAOI,GAAP;AACD,CAPD;;AASAX,MAAM,+BAAN,EAAuC,kBAAS;AAC9C,MAAMY,UAAU;AACdN,iBAAa;AADC,GAAhB;;AAIA,MAAMF,SAASD,aAAaE,MAAb,CAAoBO,OAApB,CAAf;;AAEAL,SAAOC,MAAP,CAAcI,QAAQN,WAAtB,EAAmC,UAAnC;AACAC,SAAOI,GAAP;AACD,CATD;;AAWAX,MAAM,yCAAN,EAAiD,kBAAS;AACxD,MAAMI,SAASD,aAAaE,MAAb,CAAoB;AACjCC,iBAAa,UADoB;AAEjCG,aAAS;AACPC,qBAAe;AADR;AAFwB,GAApB,CAAf;;AAOAH,SAAOC,MAAP,CAAcJ,OAAOK,OAAP,CAAeC,aAA7B,EAA4C,iBAA5C;AACAH,SAAOI,GAAP;AACD,CAVD;;AAYAX,MAAM,0DAAN,EAAkE,kBAAS;AACzE,MAAMI,SAASD,aAAaE,MAAb,CAAoB;AACjCC,iBAAa,UADoB;AAEjCG,aAAS;AACPI,qBAAe;AADR;AAFwB,GAApB,CAAf;;AAOAN,SAAOC,MAAP,CAAcJ,OAAOK,OAAP,CAAeC,aAA7B,EAA4C,iBAA5C;AACAH,SAAOC,MAAP,CAAcJ,OAAOK,OAAP,CAAeI,aAA7B,EAA4CC,SAA5C;AACAP,SAAOI,GAAP;AACD,CAXD","file":"bearer-token.test.js","sourcesContent":["'use strict';\n\nconst _test = require('tap').test;\nconst _bearerToken = require('./bearer-token');\n\n_test('Sets Authorization header', assert =>{\n  const result = _bearerToken.filter({\n    bearerToken: 'my token'\n  });\n  \n  assert.equals(result.headers.Authorization, 'Bearer my token');\n  assert.end();\n});\n\n_test('request.bearerToken unchanged', assert =>{\n  const request = {\n    bearerToken: 'my token'\n  };\n  \n  const result = _bearerToken.filter(request);\n  \n  assert.equals(request.bearerToken, 'my token');\n  assert.end();\n});\n\n_test('Overrides existing Authorization header', assert =>{\n  const result = _bearerToken.filter({\n    bearerToken: 'my token',\n    headers: {\n      Authorization: 'original'\n    }\n  });\n  \n  assert.equals(result.headers.Authorization, 'Bearer my token');\n  assert.end();\n});\n\n_test('Overrides existing Authorization header case insensitive', assert =>{\n  const result = _bearerToken.filter({\n    bearerToken: 'my token',\n    headers: {\n      authorization: 'original'\n    }\n  });\n  \n  assert.equals(result.headers.Authorization, 'Bearer my token');\n  assert.equals(result.headers.authorization, undefined);\n  assert.end();\n});"]}