{"version":3,"sources":["../../../../../../node_modules/@tonybadguy/call-me-maybe/lib/request-filters/url-params.test.js"],"names":["_test","require","test","_urlParams","result","filter","url","assert","equals","end","urlParams","resource","id","request"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,KAAR,EAAeC,IAA7B;AACA,IAAMC,aAAaF,QAAQ,cAAR,CAAnB;;AAEAD,MAAM,mBAAN,EAA2B,kBAAS;AAClC,MAAMI,SAASD,WAAWE,MAAX,CAAkB;AAC/BC,SAAK;AAD0B,GAAlB,CAAf;;AAIAC,SAAOC,MAAP,CAAcJ,OAAOE,GAArB,EAA0B,yBAA1B;AACAC,SAAOE,GAAP;AACD,CAPD;;AASAT,MAAM,8BAAN,EAAsC,kBAAU;AAC9C,MAAMI,SAASD,WAAWE,MAAX,CAAkB;AAC/BC,SAAK,wCAD0B;AAE/BI,eAAW;AACTC,gBAAU,cADD;AAETC,UAAI;AAFK;AAFoB,GAAlB,CAAf;;AAQAL,SAAOC,MAAP,CAAcJ,OAAOE,GAArB,EAA0B,yCAA1B;AACAC,SAAOE,GAAP;AACD,CAXD;;AAaAT,MAAM,gCAAN,EAAwC,kBAAU;AAChD,MAAMI,SAASD,WAAWE,MAAX,CAAkB;AAC/BC,SAAK,mCAD0B;AAE/BI,eAAW;AACTC,gBAAU;AADD;AAFoB,GAAlB,CAAf;;AAOAJ,SAAOC,MAAP,CAAcJ,OAAOE,GAArB,EAA0B,wCAA1B;AACAC,SAAOE,GAAP;AACD,CAVD;;AAYAT,MAAM,+BAAN,EAAuC,kBAAU;AAC/C,MAAMI,SAASD,WAAWE,MAAX,CAAkB;AAC/BC,SAAK;AAD0B,GAAlB,CAAf;;AAIAC,SAAOC,MAAP,CAAcJ,OAAOE,GAArB,EAA0B,kCAA1B;AACAC,SAAOE,GAAP;AACD,CAPD;;AASAT,MAAM,qBAAN,EAA6B,kBAAU;AACrC,MAAMa,UAAU;AACdP,SAAK,mCADS;AAEdI,eAAW;AACTC,gBAAU;AADD;AAFG,GAAhB;;AAOA,MAAMP,SAASD,WAAWE,MAAX,CAAkBQ,OAAlB,CAAf;;AAEAN,SAAOC,MAAP,CAAcK,QAAQH,SAAR,CAAkBC,QAAhC,EAA0C,QAA1C;AACAJ,SAAOE,GAAP;AACD,CAZD","file":"url-params.test.js","sourcesContent":["'use strict';\n\nconst _test = require('tap').test;\nconst _urlParams = require('./url-params');\n\n_test('Noop on basic Url', assert =>{\n  const result = _urlParams.filter({\n    url: 'https://www.google.com'\n  });\n  \n  assert.equals(result.url, 'https://www.google.com/');\n  assert.end();\n});\n\n_test('UrlParams update request url', assert => {\n  const result = _urlParams.filter({\n    url: 'https://www.google.com/{resource}/{id}',\n    urlParams: {\n      resource: 'someResource',\n      id: '123'\n    }\n  });\n  \n  assert.equals(result.url, 'https://www.google.com/someResource/123');\n  assert.end();\n});\n\n_test('UrlParams url encode urlParams', assert => {\n  const result = _urlParams.filter({\n    url: 'https://www.google.com/{resource}',\n    urlParams: {\n      resource: 'some resource'\n    }\n  });\n  \n  assert.equals(result.url, 'https://www.google.com/some%20resource');\n  assert.end();\n});\n\n_test('Original url gets url encoded', assert => {\n  const result = _urlParams.filter({\n    url: 'https://www.google.com/foo bar'\n  });\n  \n  assert.equals(result.url, 'https://www.google.com/foo%20bar');\n  assert.end();\n});\n\n_test('UrlParams unchanged', assert => {\n  const request = {\n    url: 'https://www.google.com/{resource}',\n    urlParams: {\n      resource: 'oh hai'\n    }\n  };\n  \n  const result = _urlParams.filter(request);\n  \n  assert.equals(request.urlParams.resource, 'oh hai');\n  assert.end();\n});"]}