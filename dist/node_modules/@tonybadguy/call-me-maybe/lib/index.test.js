'use strict';

var _test = require('tap').test;
var _proxyquire = require('proxyquire');
var _sinon = require('sinon');

_test('Default request filters if not specified', function (assert) {
  var defaultRequestFilters = _sinon.spy();

  var index = _proxyquire('./index', {
    './default-request-filters': defaultRequestFilters,
    './process-filters': function processFilters() {}
  });

  index({});

  assert.true(defaultRequestFilters.calledOnce);
  assert.end();
});

_test('Default request filters not called if specified', function (assert) {

  var defaultRequestFilters = _sinon.spy();

  var index = _proxyquire('./index', {
    './default-request-filters': defaultRequestFilters,
    './process-filters': function processFilters() {}
  });

  index({}, {});

  assert.false(defaultRequestFilters.called);
  assert.end();
});

_test('Default response filters if not specified', function (assert) {

  var defaultResponseFilters = _sinon.spy();

  var index = _proxyquire('./index', {
    './default-response-filters': defaultResponseFilters,
    './process-filters': function processFilters() {}
  });

  index({});

  assert.true(defaultResponseFilters.calledOnce);
  assert.end();
});

_test('Default response filters not called if specified', function (assert) {

  var defaultResponseFilters = _sinon.spy();

  var index = _proxyquire('./index', {
    './default-response-filters': defaultResponseFilters,
    './process-filters': function processFilters() {}
  });

  index({}, null, {});

  assert.false(defaultResponseFilters.called);
  assert.end();
});

_test('Calls process filters for request', function (assert) {
  var processFilters = _sinon.spy();

  var request = {};
  var requestFilters = ['request filters'];

  var index = _proxyquire('./index', {
    './process-filters': processFilters
  });

  index(request, requestFilters);

  assert.true(processFilters.withArgs(request, requestFilters).calledOnce);
  assert.end();
});

_test('Calls process filters for response', function (assert) {

  var processFilters = _sinon.spy();

  var response = {};
  var responseFilters = ['response filters'];

  var send = _proxyquire('./index', {
    'small-request': {
      send: function send() {
        return new Promise(function (resolve, reject) {
          resolve(response);
        });
      }
    },
    './process-filters': processFilters
  });

  send({}, null, responseFilters).then(function (result) {
    assert.true(processFilters.withArgs(response, responseFilters).called);
    assert.end();
  });
});
//# sourceMappingURL=index.test.js.map