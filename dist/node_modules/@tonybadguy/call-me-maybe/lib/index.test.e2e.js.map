{"version":3,"sources":["../../../../../node_modules/@tonybadguy/call-me-maybe/lib/index.test.e2e.js"],"names":["_send","require","_test","test","url","then","assert","equal","response","statusCode","jsonBody","end","urlParams","foo","query","method","body","data","json","plan","urlencodedBody","form","headerName","headerValue","headers","fail","catch","error","code"],"mappings":"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","file":"index.test.e2e.js","sourcesContent":["'use strict';\n\nconst _send = require('./index');\nconst _test = require('tap').test;\n\n_test('Basic GET succeeds', assert => {\n  const url = 'https://httpbin.org/get';\n  \n  _send({\n    url: url\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.url, url);\n    assert.end();\n  });\n});\n\n_test('Basic GET with formatted url', assert => {\n  const url = 'https://httpbin.org/{foo}';\n  \n  _send({\n    url: url,\n    urlParams:{\n      foo:'get'\n    }\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.url, 'https://httpbin.org/get');\n    assert.end();\n  });\n});\n\n_test('Basic GET with query object', assert => {\n  const url = 'https://httpbin.org/get';\n  \n  _send({\n    url: url,\n    query:{\n      foo:'bar'\n    }\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.url, 'https://httpbin.org/get?foo=bar');\n    assert.end();\n  });\n});\n\n_test('Basic POST', assert => {\n  \n  const url = 'https://httpbin.org/post';\n  \n  _send({\n    url: url,\n    method: 'POST'\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.url, url);\n    assert.end();\n  });\n});\n\n_test('Basic POST with body', assert => {\n  \n  const url = 'https://httpbin.org/post';\n  \n  _send({\n    url: url,\n    method: 'POST',\n    body: 'my data'\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.data, 'my data');\n    assert.end();\n  });\n});\n\n_test('POST json body', assert => {\n  \n  const url = 'https://httpbin.org/post';\n  \n  _send({\n    url: url,\n    method: 'POST',\n    jsonBody:{\n      foo:'bar'\n    }\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.json.foo, 'bar');\n    assert.end();\n  });\n});\n\n_test('POST urlencoded body', assert => {\n  \n  assert.plan(2);\n  const url = 'https://httpbin.org/post';\n  \n  _send({\n    url: url,\n    method: 'POST',\n    urlencodedBody:{\n      foo:'bar'\n    }\n  }).then(response => {\n    assert.equal(response.statusCode, 200);\n    assert.equal(response.jsonBody.form.foo, 'bar');\n  });\n});\n\n_test('Headers are sent', assert => {\n  \n  const url = 'https://httpbin.org/headers';\n  \n  const headerName = 'X-Test-Header';\n  const headerValue = 'test header value';\n  \n  _send({\n    url: url,\n    headers: {\n      [headerName]: headerValue\n    }\n  }).then(response => {\n    assert.equal(response.jsonBody.headers[headerName], headerValue);\n    assert.end();\n  });\n});\n\n_test('Reject promise when server responds with status code >= 300', assert =>{\n  const url = 'https://httpbin.org/status/300';\n  \n  _send({\n    url: url\n  }).then(response => {\n    assert.fail();\n  }).catch(error => {\n    assert.equal(error.response.statusCode, 300);\n    assert.end();\n  });\n});\n\n_test('Reject promise when server responds with status code < 200', assert =>{\n  const url = 'https://httpbin.org/status/199';\n  \n  _send({\n    url: url\n  }).then(response => {\n    assert.fail();\n  }).catch(error => {\n    assert.equal(error.response.statusCode, 199);\n    assert.end();\n  });\n});\n\n_test('Connection error rejects promise', assert =>{\n  const url = 'https://localhost:9999';\n  \n  _send({\n    url: url\n  }).then(response => {\n    assert.fail();\n  }).catch(error => {\n    assert.equal(error.code, 'ECONNREFUSED');\n    assert.end();\n  });\n});"]}