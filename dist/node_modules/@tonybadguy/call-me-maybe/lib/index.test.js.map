{"version":3,"sources":["../../../../../node_modules/@tonybadguy/call-me-maybe/lib/index.test.js"],"names":["_test","require","test","_proxyquire","_sinon","defaultRequestFilters","spy","index","assert","true","calledOnce","end","false","called","defaultResponseFilters","processFilters","request","requestFilters","withArgs","response","responseFilters","send","Promise","resolve","reject","then"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,KAAR,EAAeC,IAA7B;AACA,IAAMC,cAAcF,QAAQ,YAAR,CAApB;AACA,IAAMG,SAASH,QAAQ,OAAR,CAAf;;AAEAD,MAAM,0CAAN,EAAkD,kBAAU;AAC1D,MAAMK,wBAAwBD,OAAOE,GAAP,EAA9B;;AAEA,MAAMC,QAAQJ,YAAY,SAAZ,EAAuB;AACnC,iCAA6BE,qBADM;AAEnC,yBAAqB,0BAAK,CAAE;AAFO,GAAvB,CAAd;;AAKAE,QAAM,EAAN;;AAEAC,SAAOC,IAAP,CAAYJ,sBAAsBK,UAAlC;AACAF,SAAOG,GAAP;AACD,CAZD;;AAcAX,MAAM,iDAAN,EAAyD,kBAAU;;AAEjE,MAAMK,wBAAwBD,OAAOE,GAAP,EAA9B;;AAEA,MAAMC,QAAQJ,YAAY,SAAZ,EAAuB;AACnC,iCAA6BE,qBADM;AAEnC,yBAAqB,0BAAK,CAAE;AAFO,GAAvB,CAAd;;AAKAE,QAAM,EAAN,EAAU,EAAV;;AAEAC,SAAOI,KAAP,CAAaP,sBAAsBQ,MAAnC;AACAL,SAAOG,GAAP;AACD,CAbD;;AAeAX,MAAM,2CAAN,EAAmD,kBAAU;;AAE3D,MAAMc,yBAAyBV,OAAOE,GAAP,EAA/B;;AAEA,MAAMC,QAAQJ,YAAY,SAAZ,EAAuB;AACnC,kCAA8BW,sBADK;AAEnC,yBAAqB,0BAAK,CAAE;AAFO,GAAvB,CAAd;;AAKAP,QAAM,EAAN;;AAEAC,SAAOC,IAAP,CAAYK,uBAAuBJ,UAAnC;AACAF,SAAOG,GAAP;AACD,CAbD;;AAeAX,MAAM,kDAAN,EAA0D,kBAAU;;AAElE,MAAMc,yBAAyBV,OAAOE,GAAP,EAA/B;;AAEA,MAAMC,QAAQJ,YAAY,SAAZ,EAAuB;AACnC,kCAA8BW,sBADK;AAEnC,yBAAqB,0BAAK,CAAE;AAFO,GAAvB,CAAd;;AAKAP,QAAM,EAAN,EAAU,IAAV,EAAgB,EAAhB;;AAEAC,SAAOI,KAAP,CAAaE,uBAAuBD,MAApC;AACAL,SAAOG,GAAP;AACD,CAbD;;AAeAX,MAAM,mCAAN,EAA2C,kBAAU;AACnD,MAAMe,iBAAiBX,OAAOE,GAAP,EAAvB;;AAEA,MAAMU,UAAU,EAAhB;AACA,MAAMC,iBAAiB,CAAC,iBAAD,CAAvB;;AAEA,MAAMV,QAAQJ,YAAY,SAAZ,EAAuB;AACnC,yBAAqBY;AADc,GAAvB,CAAd;;AAIAR,QAAMS,OAAN,EAAeC,cAAf;;AAEAT,SAAOC,IAAP,CAAYM,eAAeG,QAAf,CAAwBF,OAAxB,EAAiCC,cAAjC,EAAiDP,UAA7D;AACAF,SAAOG,GAAP;AACD,CAdD;;AAgBAX,MAAM,oCAAN,EAA4C,kBAAU;;AAEpD,MAAMe,iBAAiBX,OAAOE,GAAP,EAAvB;;AAEA,MAAMa,WAAW,EAAjB;AACA,MAAMC,kBAAkB,CAAC,kBAAD,CAAxB;;AAEA,MAAMC,OAAOlB,YAAY,SAAZ,EAAuB;AAClC,qBAAgB;AACdkB,YAAM,gBAAM;AACV,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCD,kBAAQJ,QAAR;AACD,SAFM,CAAP;AAGD;AALa,KADkB;AAQlC,yBAAqBJ;AARa,GAAvB,CAAb;;AAWAM,OAAK,EAAL,EAAS,IAAT,EAAeD,eAAf,EAAgCK,IAAhC,CAAqC,kBAAS;AAC5CjB,WAAOC,IAAP,CAAYM,eAAeG,QAAf,CAAwBC,QAAxB,EAAkCC,eAAlC,EAAmDP,MAA/D;AACAL,WAAOG,GAAP;AACD,GAHD;AAKD,CAvBD","file":"index.test.js","sourcesContent":["'use strict';\n\nconst _test = require('tap').test;\nconst _proxyquire = require('proxyquire');\nconst _sinon = require('sinon');\n\n_test('Default request filters if not specified', assert => {\n  const defaultRequestFilters = _sinon.spy();\n  \n  const index = _proxyquire('./index', {\n    './default-request-filters': defaultRequestFilters,\n    './process-filters': () =>{}\n  });\n  \n  index({});\n  \n  assert.true(defaultRequestFilters.calledOnce);\n  assert.end();\n});\n\n_test('Default request filters not called if specified', assert => {\n  \n  const defaultRequestFilters = _sinon.spy();\n\n  const index = _proxyquire('./index', {\n    './default-request-filters': defaultRequestFilters,\n    './process-filters': () =>{}\n  });\n  \n  index({}, {});\n  \n  assert.false(defaultRequestFilters.called);\n  assert.end();\n});\n\n_test('Default response filters if not specified', assert => {\n  \n  const defaultResponseFilters = _sinon.spy();\n\n  const index = _proxyquire('./index', {\n    './default-response-filters': defaultResponseFilters,\n    './process-filters': () =>{}\n  });\n  \n  index({});\n  \n  assert.true(defaultResponseFilters.calledOnce);\n  assert.end();\n});\n\n_test('Default response filters not called if specified', assert => {\n  \n  const defaultResponseFilters = _sinon.spy();\n\n  const index = _proxyquire('./index', {\n    './default-response-filters': defaultResponseFilters,\n    './process-filters': () =>{}\n  });\n  \n  index({}, null, {});\n  \n  assert.false(defaultResponseFilters.called);\n  assert.end();\n});\n\n_test('Calls process filters for request', assert => {\n  const processFilters = _sinon.spy();\n  \n  const request = {};\n  const requestFilters = ['request filters'];\n  \n  const index = _proxyquire('./index', {\n    './process-filters': processFilters\n    });\n  \n  index(request, requestFilters);\n  \n  assert.true(processFilters.withArgs(request, requestFilters).calledOnce);\n  assert.end();\n});\n\n_test('Calls process filters for response', assert => {\n  \n  const processFilters = _sinon.spy();\n  \n  const response = {};\n  const responseFilters = ['response filters'];\n  \n  const send = _proxyquire('./index', {\n    'small-request':{\n      send: () => {\n        return new Promise((resolve, reject) => {\n          resolve(response);\n        });\n      }\n    },\n    './process-filters': processFilters\n  });\n  \n  send({}, null, responseFilters).then(result =>{\n    assert.true(processFilters.withArgs(response, responseFilters).called);\n    assert.end();\n  });\n  \n});"]}