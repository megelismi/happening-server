{"version":3,"sources":["../../../../../../node_modules/@tonybadguy/call-me-maybe/lib/response-filters/unhandled-status.test.js"],"names":["_test","require","test","_unhandledStatus","assert","plan","filter","statusCode","pass","fail","e","equals","type","unhandledStatusError"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,KAAR,EAAeC,IAA7B;AACA,IAAMC,mBAAmBF,QAAQ,oBAAR,CAAzB;;AAEAD,MAAM,eAAN,EAAuB,kBAAU;;AAE/BI,SAAOC,IAAP,CAAY,CAAZ;;AAEAF,mBAAiBG,MAAjB,CAAwB;AACtBC,gBAAY;AADU,GAAxB;;AAIAH,SAAOI,IAAP;AACD,CATD;;AAWAR,MAAM,eAAN,EAAuB,kBAAU;;AAE/BI,SAAOC,IAAP,CAAY,CAAZ;;AAEAF,mBAAiBG,MAAjB,CAAwB;AACtBC,gBAAY;AADU,GAAxB;;AAIAH,SAAOI,IAAP;AACD,CATD;;AAWAR,MAAM,iBAAN,EAAyB,kBAAU;;AAEjCI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAG;AACDF,qBAAiBG,MAAjB,CAAwB;AACtBC,kBAAY;AADU,KAAxB;AAGAH,WAAOK,IAAP;AACD,GALD,CAKE,OAAMC,CAAN,EAAQ;AACRN,WAAOO,MAAP,CAAcD,EAAEE,IAAhB,EAAsBT,iBAAiBU,oBAAjB,GAAwCD,IAA9D;AACD;AACF,CAZD;;AAcAZ,MAAM,iBAAN,EAAyB,kBAAU;;AAEjCI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAG;AACDF,qBAAiBG,MAAjB,CAAwB;AACtBC,kBAAY;AADU,KAAxB;AAGAH,WAAOK,IAAP;AACD,GALD,CAKE,OAAMC,CAAN,EAAQ;AACRN,WAAOO,MAAP,CAAcD,EAAEE,IAAhB,EAAsBT,iBAAiBU,oBAAjB,GAAwCD,IAA9D;AACD;AACF,CAZD","file":"unhandled-status.test.js","sourcesContent":["'use strict';\n\nconst _test = require('tap').test;\nconst _unhandledStatus = require('./unhandled-status');\n\n_test('200 status ok', assert => {\n  \n  assert.plan(1);\n  \n  _unhandledStatus.filter({\n    statusCode: 200\n  });\n  \n  assert.pass();\n});\n\n_test('299 status ok', assert => {\n  \n  assert.plan(1);\n  \n  _unhandledStatus.filter({\n    statusCode: 200\n  });\n  \n  assert.pass();\n});\n\n_test('199 status fail', assert => {\n  \n  assert.plan(1);\n  \n  try{\n    _unhandledStatus.filter({\n      statusCode: 199\n    });\n    assert.fail();\n  } catch(e){\n    assert.equals(e.type, _unhandledStatus.unhandledStatusError().type);\n  }\n});\n\n_test('300 status fail', assert => {\n  \n  assert.plan(1);\n  \n  try{\n    _unhandledStatus.filter({\n      statusCode: 300\n    });\n    assert.fail();\n  } catch(e){\n    assert.equals(e.type, _unhandledStatus.unhandledStatusError().type);\n  }\n});"]}