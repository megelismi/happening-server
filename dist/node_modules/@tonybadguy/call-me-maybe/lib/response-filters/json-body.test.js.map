{"version":3,"sources":["../../../../../../node_modules/@tonybadguy/call-me-maybe/lib/response-filters/json-body.test.js"],"names":["_test","require","test","_jsonBody","assert","plan","result","filter","body","equals","jsonBody","foo","undefined"],"mappings":"AAAA;;AAEA,IAAMA,QAAQC,QAAQ,KAAR,EAAeC,IAA7B;AACA,IAAMC,YAAYF,QAAQ,aAAR,CAAlB;;AAEAD,MAAM,cAAN,EAAsB,kBAAS;AAC7BI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAMC,SAASH,UAAUI,MAAV,CAAiB;AAC9BC,UAAK;AADyB,GAAjB,CAAf;;AAIAJ,SAAOK,MAAP,CAAcH,OAAOI,QAAP,CAAgBC,GAA9B,EAAmC,KAAnC;AACD,CARD;;AAUAX,MAAM,aAAN,EAAqB,kBAAS;AAC5BI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAMC,SAASH,UAAUI,MAAV,CAAiB;AAC9BC,UAAK;AADyB,GAAjB,CAAf;;AAIAJ,SAAOK,MAAP,CAAcH,OAAOI,QAAP,CAAgB,CAAhB,CAAd,EAAkC,GAAlC;AACD,CARD;;AAUAV,MAAM,cAAN,EAAsB,kBAAS;AAC7BI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAMC,SAASH,UAAUI,MAAV,CAAiB;AAC9BC,UAAK;AADyB,GAAjB,CAAf;;AAIAJ,SAAOK,MAAP,CAAcH,OAAOI,QAArB,EAA+B,GAA/B;AACD,CARD;;AAUAV,MAAM,kCAAN,EAA0C,kBAAS;AACjDI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAMC,SAASH,UAAUI,MAAV,CAAiB;AAC9BC,UAAK;AADyB,GAAjB,CAAf;;AAIAJ,SAAOK,MAAP,CAAcH,OAAOI,QAArB,EAA+BE,SAA/B;AACD,CARD;;AAUAZ,MAAM,8BAAN,EAAsC,kBAAS;AAC7CI,SAAOC,IAAP,CAAY,CAAZ;;AAEA,MAAMC,SAASH,UAAUI,MAAV,CAAiB;AAC9BC,UAAK;AADyB,GAAjB,CAAf;;AAIAJ,SAAOK,MAAP,CAAcH,OAAOI,QAArB,EAA+BE,SAA/B;AACD,CARD","file":"json-body.test.js","sourcesContent":["'use strict';\n\nconst _test = require('tap').test;\nconst _jsonBody = require('./json-body');\n\n_test('Parse object', assert =>{\n  assert.plan(1);\n  \n  const result = _jsonBody.filter({\n    body:'{\"foo\":\"bar\"}'\n  });\n  \n  assert.equals(result.jsonBody.foo, 'bar');\n});\n\n_test('Parse array', assert =>{\n  assert.plan(1);\n  \n  const result = _jsonBody.filter({\n    body:'[123]'\n  });\n  \n  assert.equals(result.jsonBody[0], 123);\n});\n\n_test('Parse number', assert =>{\n  assert.plan(1);\n  \n  const result = _jsonBody.filter({\n    body:'123'\n  });\n  \n  assert.equals(result.jsonBody, 123);\n});\n\n_test('Does not parse standalone string', assert =>{\n  assert.plan(1);\n  \n  const result = _jsonBody.filter({\n    body:'abc'\n  });\n  \n  assert.equals(result.jsonBody, undefined);\n});\n\n_test('Parse exceptions are ignored', assert =>{\n  assert.plan(1);\n  \n  const result = _jsonBody.filter({\n    body:'{1a]'\n  });\n  \n  assert.equals(result.jsonBody, undefined);\n});\n"]}