{"version":3,"sources":["../../../node_modules/ansi-align/index.js"],"names":["stringWidth","require","ansiAlign","text","opts","align","split","pad","widthDiffFn","halfDiff","fullDiff","returnString","Array","isArray","String","width","maxWidth","map","str","Math","max","obj","join","left","center","right","module","exports","curWidth","floor"],"mappings":"AAAA;;AAEA,IAAMA,cAAcC,QAAQ,cAAR,CAApB;;AAEA,SAASC,SAAT,CAAoBC,IAApB,EAA0BC,IAA1B,EAAgC;AAC9B,MAAI,CAACD,IAAL,EAAW,OAAOA,IAAP;;AAEXC,SAAOA,QAAQ,EAAf;AACA,MAAMC,QAAQD,KAAKC,KAAL,IAAc,QAA5B;;AAEA;AACA,MAAIA,UAAU,MAAd,EAAsB,OAAOF,IAAP;;AAEtB,MAAMG,QAAQF,KAAKE,KAAL,IAAc,IAA5B;AACA,MAAMC,MAAMH,KAAKG,GAAL,IAAY,GAAxB;AACA,MAAMC,cAAcH,UAAU,OAAV,GAAoBI,QAApB,GAA+BC,QAAnD;;AAEA,MAAIC,eAAe,KAAnB;AACA,MAAI,CAACC,MAAMC,OAAN,CAAcV,IAAd,CAAL,EAA0B;AACxBQ,mBAAe,IAAf;AACAR,WAAOW,OAAOX,IAAP,EAAaG,KAAb,CAAmBA,KAAnB,CAAP;AACD;;AAED,MAAIS,cAAJ;AACA,MAAIC,WAAW,CAAf;AACAb,SAAOA,KAAKc,GAAL,CAAS,UAAUC,GAAV,EAAe;AAC7BA,UAAMJ,OAAOI,GAAP,CAAN;AACAH,YAAQf,YAAYkB,GAAZ,CAAR;AACAF,eAAWG,KAAKC,GAAL,CAASL,KAAT,EAAgBC,QAAhB,CAAX;AACA,WAAO;AACLE,cADK;AAELH;AAFK,KAAP;AAID,GARM,EAQJE,GARI,CAQA,UAAUI,GAAV,EAAe;AACpB,WAAO,IAAIT,KAAJ,CAAUJ,YAAYQ,QAAZ,EAAsBK,IAAIN,KAA1B,IAAmC,CAA7C,EAAgDO,IAAhD,CAAqDf,GAArD,IAA4Dc,IAAIH,GAAvE;AACD,GAVM,CAAP;;AAYA,SAAOP,eAAeR,KAAKmB,IAAL,CAAUhB,KAAV,CAAf,GAAkCH,IAAzC;AACD;;AAEDD,UAAUqB,IAAV,GAAiB,SAASA,IAAT,CAAepB,IAAf,EAAqB;AACpC,SAAOD,UAAUC,IAAV,EAAgB,EAAEE,OAAO,MAAT,EAAhB,CAAP;AACD,CAFD;;AAIAH,UAAUsB,MAAV,GAAmB,SAASA,MAAT,CAAiBrB,IAAjB,EAAuB;AACxC,SAAOD,UAAUC,IAAV,EAAgB,EAAEE,OAAO,QAAT,EAAhB,CAAP;AACD,CAFD;;AAIAH,UAAUuB,KAAV,GAAkB,SAASA,KAAT,CAAgBtB,IAAhB,EAAsB;AACtC,SAAOD,UAAUC,IAAV,EAAgB,EAAEE,OAAO,OAAT,EAAhB,CAAP;AACD,CAFD;;AAIAqB,OAAOC,OAAP,GAAiBzB,SAAjB;;AAEA,SAASO,QAAT,CAAmBO,QAAnB,EAA6BY,QAA7B,EAAuC;AACrC,SAAOT,KAAKU,KAAL,CAAW,CAACb,WAAWY,QAAZ,IAAwB,CAAnC,CAAP;AACD;;AAED,SAASlB,QAAT,CAAmBM,QAAnB,EAA6BY,QAA7B,EAAuC;AACrC,SAAOZ,WAAWY,QAAlB;AACD","file":"index.js","sourcesContent":["'use strict'\n\nconst stringWidth = require('string-width')\n\nfunction ansiAlign (text, opts) {\n  if (!text) return text\n\n  opts = opts || {}\n  const align = opts.align || 'center'\n\n  // short-circuit `align: 'left'` as no-op\n  if (align === 'left') return text\n\n  const split = opts.split || '\\n'\n  const pad = opts.pad || ' '\n  const widthDiffFn = align !== 'right' ? halfDiff : fullDiff\n\n  let returnString = false\n  if (!Array.isArray(text)) {\n    returnString = true\n    text = String(text).split(split)\n  }\n\n  let width\n  let maxWidth = 0\n  text = text.map(function (str) {\n    str = String(str)\n    width = stringWidth(str)\n    maxWidth = Math.max(width, maxWidth)\n    return {\n      str,\n      width\n    }\n  }).map(function (obj) {\n    return new Array(widthDiffFn(maxWidth, obj.width) + 1).join(pad) + obj.str\n  })\n\n  return returnString ? text.join(split) : text\n}\n\nansiAlign.left = function left (text) {\n  return ansiAlign(text, { align: 'left' })\n}\n\nansiAlign.center = function center (text) {\n  return ansiAlign(text, { align: 'center' })\n}\n\nansiAlign.right = function right (text) {\n  return ansiAlign(text, { align: 'right' })\n}\n\nmodule.exports = ansiAlign\n\nfunction halfDiff (maxWidth, curWidth) {\n  return Math.floor((maxWidth - curWidth) / 2)\n}\n\nfunction fullDiff (maxWidth, curWidth) {\n  return maxWidth - curWidth\n}\n"]}